Index: cvat/apps/engine/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport shutil\r\nimport traceback\r\nimport django_rq\r\nimport os.path as osp\r\nfrom datetime import datetime\r\nfrom tempfile import mkstemp\r\nfrom django.conf import settings\r\nfrom django.contrib.auth.models import User\r\nfrom django.db import IntegrityError\r\nfrom django.http import HttpResponse, HttpResponseNotFound\r\nfrom django.shortcuts import render\r\nfrom django.utils import timezone\r\nfrom django.utils.decorators import method_decorator\r\nfrom django.views.generic import RedirectView\r\nfrom django_filters import rest_framework as filters\r\nfrom django_filters.rest_framework import DjangoFilterBackend\r\nfrom drf_yasg import openapi\r\nfrom drf_yasg.inspectors import CoreAPICompatInspector, NotHandled\r\nfrom drf_yasg.utils import swagger_auto_schema\r\nfrom rest_framework import mixins, serializers, status, viewsets\r\nfrom rest_framework.decorators import action\r\nfrom rest_framework.exceptions import APIException\r\nfrom rest_framework.permissions import SAFE_METHODS, IsAuthenticated\r\nfrom rest_framework.renderers import JSONRenderer\r\nfrom rest_framework.response import Response\r\nfrom sendfile import sendfile\r\n\r\nimport cvat.apps.dataset_manager as dm\r\nimport cvat.apps.dataset_manager.views\r\nfrom cvat.apps.authentication import auth\r\nfrom cvat.apps.authentication.decorators import login_required\r\nfrom cvat.apps.dataset_manager.serializers import DatasetFormatsSerializer\r\nfrom cvat.apps.engine.frame_provider import FrameProvider\r\nfrom cvat.apps.engine.models import Job, Plugin, StatusChoice, Task, Log\r\nfrom cvat.apps.engine.serializers import (\r\n    AnnotationFileSerializer, BasicUserSerializer,\r\n    DataMetaSerializer, DataSerializer, ExceptionSerializer,\r\n    FileInfoSerializer, JobSerializer, LabeledDataSerializer,\r\n    LogEventSerializer, PluginSerializer, ProjectSerializer,\r\n    RqStatusSerializer, TaskSerializer, UserSerializer, LogSerializer)\r\nfrom cvat.settings.base import CSS_3RDPARTY, JS_3RDPARTY\r\n\r\nfrom . import models, task\r\nfrom .log import clogger, slogger\r\n\r\n\r\n# drf-yasg component doesn't handle correctly URL_FORMAT_OVERRIDE and\r\n# send requests with ?format=openapi suffix instead of ?scheme=openapi.\r\n# We map the required paramater explicitly and add it into query arguments\r\n# on the server side.\r\ndef wrap_swagger(view):\r\n    @login_required\r\n    def _map_format_to_schema(request, scheme=None):\r\n        if 'format' in request.GET:\r\n            request.GET = request.GET.copy()\r\n            format_alias = settings.REST_FRAMEWORK['URL_FORMAT_OVERRIDE']\r\n            request.GET[format_alias] = request.GET['format']\r\n        return view(request, format=scheme)\r\n\r\n    return _map_format_to_schema\r\n\r\n\r\n# Server REST API\r\n@login_required\r\ndef dispatch_request(request):\r\n    \"\"\"分派遗留请求的入口点\"\"\"\r\n    print(request)\r\n    if 'dashboard' in request.path or (request.path == '/' and 'id' not in request.GET):\r\n        return RedirectView.as_view(\r\n            url=settings.UI_URL,\r\n            permanent=True,\r\n            query_string=True\r\n        )(request)\r\n    elif request.method == 'GET' and 'id' in request.GET and request.path == '/':\r\n        return render(request, 'engine/annotation.html', {\r\n            'css_3rdparty': CSS_3RDPARTY.get('engine', []),\r\n            'js_3rdparty': JS_3RDPARTY.get('engine', []),\r\n            'status_list': [str(i) for i in StatusChoice],\r\n            'ui_url': settings.UI_URL\r\n        })\r\n    else:\r\n        return HttpResponseNotFound()\r\n\r\n\r\nclass ServerViewSet(viewsets.ViewSet):\r\n    serializer_class = None\r\n\r\n    # 要获得有关ServerViewSet操作的良好文档，必须实现该方法。默认情况下，ViewSet不提供它。\r\n    def get_serializer(self, *args, **kwargs):\r\n        pass\r\n\r\n    @staticmethod\r\n    @swagger_auto_schema(method='post', request_body=ExceptionSerializer)\r\n    @action(detail=False, methods=['POST'], serializer_class=ExceptionSerializer)\r\n    def exception(request):\r\n        \"\"\"从服务器上的客户端保存异常，向ELK发送日志（如果它已连接）\"\"\"\r\n        serializer = ExceptionSerializer(data=request.data)\r\n        if serializer.is_valid(raise_exception=True):\r\n            additional_info = {\r\n                \"username\": request.user.username,\r\n                \"name\": \"Send exception\",\r\n            }\r\n            message = JSONRenderer().render({**serializer.data, **additional_info}).decode('UTF-8')\r\n            jid = serializer.data.get(\"job_id\")\r\n            tid = serializer.data.get(\"task_id\")\r\n            if jid:\r\n                clogger.job[jid].error(message)\r\n            elif tid:\r\n                clogger.task[tid].error(message)\r\n            else:\r\n                clogger.glob.error(message)\r\n\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n\r\n    @staticmethod\r\n    @swagger_auto_schema(method='post', request_body=LogEventSerializer(many=True))\r\n    @action(detail=False, methods=['POST'], serializer_class=LogEventSerializer)\r\n    def logs(request):\r\n        \"\"\"将来自客户端的日志保存到服务器上，向 ELK 发送日志（如果它已连接）\"\"\"\r\n        serializer = LogEventSerializer(many=True, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        user = {\"username\": request.user.username}\r\n        for event in serializer.data:\r\n            message = JSONRenderer().render({**event, **user}).decode('UTF-8')\r\n            jobId = event.get(\"job_id\")\r\n            taskId = event.get(\"task_id\")\r\n            if jobId:\r\n                clogger.job[jobId].info(message)\r\n            elif taskId:\r\n                clogger.task[taskId].info(message)\r\n            else:\r\n                clogger.glob.info(message)\r\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n\r\n    @staticmethod\r\n    @swagger_auto_schema(\r\n        method='get',\r\n        operation_summary='返回服务器上沿指定路径的所有文件和文件夹',\r\n        manual_parameters=[openapi.Parameter('directory',\r\n                                             openapi.IN_QUERY,\r\n                                             type=openapi.TYPE_STRING,\r\n                                             description='要浏览的目录')],\r\n        responses={'200': FileInfoSerializer(many=True)}\r\n    )\r\n    @action(detail=False, methods=['GET'], serializer_class=FileInfoSerializer)\r\n    def share(request):\r\n        param = request.query_params.get('directory', '/')\r\n        if param.startswith(\"/\"):\r\n            param = param[1:]\r\n        directory = os.path.abspath(os.path.join(settings.SHARE_ROOT, param))\r\n\r\n        if directory.startswith(settings.SHARE_ROOT) and os.path.isdir(directory):\r\n            data = []\r\n            content = os.scandir(directory)\r\n            for entry in content:\r\n                entry_type = None\r\n                if entry.is_file():\r\n                    entry_type = \"REG\"\r\n                elif entry.is_dir():\r\n                    entry_type = \"DIR\"\r\n                if entry_type:\r\n                    data.append({\"name\": entry.name, \"type\": entry_type})\r\n\r\n            serializer = FileInfoSerializer(many=True, data=data)\r\n            if serializer.is_valid(raise_exception=True):\r\n                return Response(serializer.data)\r\n        else:\r\n            return Response(\"{} is an invalid directory\".format(param), status=status.HTTP_400_BAD_REQUEST)\r\n\r\n    @staticmethod\r\n    @swagger_auto_schema(method='get',\r\n                         operation_summary='方法提供支持的标注格式的列表',\r\n                         responses={'200': DatasetFormatsSerializer()})\r\n    @action(detail=False, methods=['GET'], url_path='annotation/formats')\r\n    def annotation_formats(request):\r\n        data = dm.views.get_all_formats()\r\n        return Response(DatasetFormatsSerializer(data).data)\r\n\r\n\r\nclass ProjectFilter(filters.FilterSet):\r\n    name = filters.CharFilter(field_name=\"name\", lookup_expr=\"icontains\")\r\n    owner = filters.CharFilter(field_name=\"owner__username\", lookup_expr=\"icontains\")\r\n    status = filters.CharFilter(field_name=\"status\", lookup_expr=\"icontains\")\r\n    assignee = filters.CharFilter(field_name=\"assignee__username\", lookup_expr=\"icontains\")\r\n\r\n    class Meta:\r\n        model = models.Project\r\n        fields = (\"id\", \"name\", \"owner\", \"status\", \"assignee\")\r\n\r\n\r\n@method_decorator(name='list', decorator=swagger_auto_schema(\r\n    operation_summary='Returns a paginated list of projects according to query parameters (10 projects per page)',\r\n    manual_parameters=[\r\n        openapi.Parameter('id', openapi.IN_QUERY, description=\"A unique number value identifying this project\",\r\n                          type=openapi.TYPE_NUMBER),\r\n        openapi.Parameter('name', openapi.IN_QUERY,\r\n                          description=\"Find all projects where name contains a parameter value\",\r\n                          type=openapi.TYPE_STRING),\r\n        openapi.Parameter('owner', openapi.IN_QUERY,\r\n                          description=\"Find all project where owner name contains a parameter value\",\r\n                          type=openapi.TYPE_STRING),\r\n        openapi.Parameter('status', openapi.IN_QUERY, description=\"Find all projects with a specific status\",\r\n                          type=openapi.TYPE_STRING, enum=[str(i) for i in StatusChoice]),\r\n        openapi.Parameter('assignee', openapi.IN_QUERY,\r\n                          description=\"Find all projects where assignee name contains a parameter value\",\r\n                          type=openapi.TYPE_STRING)]))\r\n@method_decorator(name='create', decorator=swagger_auto_schema(operation_summary='Method creates a new project'))\r\n@method_decorator(name='retrieve',\r\n                  decorator=swagger_auto_schema(operation_summary='Method returns details of a specific project'))\r\n@method_decorator(name='destroy', decorator=swagger_auto_schema(operation_summary='Method deletes a specific project'))\r\n@method_decorator(name='partial_update', decorator=swagger_auto_schema(\r\n    operation_summary='Methods does a partial update of chosen fields in a project'))\r\nclass ProjectViewSet(auth.ProjectGetQuerySetMixin, viewsets.ModelViewSet):\r\n    queryset = models.Project.objects.all().order_by('-id')\r\n    serializer_class = ProjectSerializer\r\n    search_fields = (\"name\", \"owner__username\", \"assignee__username\", \"status\")\r\n    filterset_class = ProjectFilter\r\n    ordering_fields = (\"id\", \"name\", \"owner\", \"status\", \"assignee\")\r\n    http_method_names = ['get', 'post', 'head', 'patch', 'delete']\r\n\r\n    def get_permissions(self):\r\n        http_method = self.request.method\r\n        permissions = [IsAuthenticated]\r\n\r\n        if http_method in SAFE_METHODS:\r\n            permissions.append(auth.ProjectAccessPermission)\r\n        elif http_method in [\"POST\"]:\r\n            permissions.append(auth.ProjectCreatePermission)\r\n        elif http_method in [\"PATCH\"]:\r\n            permissions.append(auth.ProjectChangePermission)\r\n        elif http_method in [\"DELETE\"]:\r\n            permissions.append(auth.ProjectDeletePermission)\r\n        else:\r\n            permissions.append(auth.AdminRolePermission)\r\n\r\n        return [perm() for perm in permissions]\r\n\r\n    def perform_create(self, serializer):\r\n        if self.request.data.get('owner', None):\r\n            serializer.save()\r\n        else:\r\n            serializer.save(owner=self.request.user)\r\n\r\n    @swagger_auto_schema(method='get',\r\n                         operation_summary='Returns information of the tasks of the project with the selected id',\r\n                         responses={'200': TaskSerializer(many=True)})\r\n    @action(detail=True, methods=['GET'], serializer_class=TaskSerializer)\r\n    def tasks(self, request, pk):\r\n        self.get_object()  # force to call check_object_permissions\r\n        queryset = Task.objects.filter(project_id=pk).order_by('-id')\r\n        queryset = auth.filter_task_queryset(queryset, request.user)\r\n\r\n        page = self.paginate_queryset(queryset)\r\n        if page is not None:\r\n            serializer = self.get_serializer(page, many=True, context={\"request\": request})\r\n            return self.get_paginated_response(serializer.data)\r\n\r\n        serializer = self.get_serializer(queryset, many=True, context={\"request\": request})\r\n        return Response(serializer.data)\r\n\r\n\r\nclass TaskFilter(filters.FilterSet):\r\n    project = filters.CharFilter(field_name=\"project__name\", lookup_expr=\"icontains\")\r\n    name = filters.CharFilter(field_name=\"name\", lookup_expr=\"icontains\")\r\n    owner = filters.CharFilter(field_name=\"owner__username\", lookup_expr=\"icontains\")\r\n    mode = filters.CharFilter(field_name=\"mode\", lookup_expr=\"icontains\")\r\n    status = filters.CharFilter(field_name=\"status\", lookup_expr=\"icontains\")\r\n    assignee = filters.CharFilter(field_name=\"assignee__username\", lookup_expr=\"icontains\")\r\n\r\n    class Meta:\r\n        model = Task\r\n        fields = (\"id\", \"project_id\", \"project\", \"name\", \"owner\", \"mode\", \"status\", \"assignee\")\r\n\r\n\r\nclass DjangoFilterInspector(CoreAPICompatInspector):\r\n    def get_filter_parameters(self, filter_backend):\r\n        if isinstance(filter_backend, DjangoFilterBackend):\r\n            result = super(DjangoFilterInspector, self).get_filter_parameters(filter_backend)\r\n            res = result.copy()\r\n\r\n            for param in result:\r\n                if param.get('name') == 'project_id' or param.get('name') == 'project':\r\n                    res.remove(param)\r\n            return res\r\n\r\n        return NotHandled\r\n\r\n\r\n@method_decorator(name='list', decorator=swagger_auto_schema(\r\n    operation_summary='根据查询参数返回分页的任务列表（每页10个任务）',\r\n    manual_parameters=[\r\n        openapi.Parameter('id',\r\n                          openapi.IN_QUERY,\r\n                          description=\"标识此任务的唯一数值\",\r\n                          type=openapi.TYPE_NUMBER),\r\n        openapi.Parameter('name',\r\n                          openapi.IN_QUERY,\r\n                          description=\"查找名称中包含参数值的所有任务\",\r\n                          type=openapi.TYPE_STRING),\r\n        openapi.Parameter('owner',\r\n                          openapi.IN_QUERY,\r\n                          description=\"Find all tasks where owner name contains a parameter value\",\r\n                          type=openapi.TYPE_STRING),\r\n        openapi.Parameter('mode',\r\n                          openapi.IN_QUERY,\r\n                          description=\"Find all tasks with a specific mode\",\r\n                          type=openapi.TYPE_STRING,\r\n                          enum=['annotation', 'interpolation']),\r\n        openapi.Parameter('status',\r\n                          openapi.IN_QUERY,\r\n                          description=\"Find all tasks with a specific status\",\r\n                          type=openapi.TYPE_STRING,\r\n                          enum=['annotation', 'validation', 'completed']),\r\n        openapi.Parameter('assignee',\r\n                          openapi.IN_QUERY,\r\n                          description=\"Find all tasks where assignee name contains a parameter value\",\r\n                          type=openapi.TYPE_STRING)\r\n    ],\r\n    filter_inspectors=[DjangoFilterInspector]))\r\n@method_decorator(name='create',\r\n                  decorator=swagger_auto_schema(operation_summary='在没有任何附加的方法的情况下创建一个新的视频数据库和任务'))\r\n@method_decorator(name='retrieve',\r\n                  decorator=swagger_auto_schema(operation_summary='方法返回特定任务的详细信息'))\r\n@method_decorator(name='update',\r\n                  decorator=swagger_auto_schema(operation_summary='方法按id更新任务'))\r\n@method_decorator(name='destroy',\r\n                  decorator=swagger_auto_schema(operation_summary='方法删除特定任务、所有附加的作业、批注和数据'))\r\n@method_decorator(name='partial_update',\r\n                  decorator=swagger_auto_schema(operation_summary='方法对任务中选定的字段执行部分更新'))\r\nclass TaskViewSet(auth.TaskGetQuerySetMixin, viewsets.ModelViewSet):\r\n    queryset = Task.objects.all().prefetch_related(\r\n        \"label_set__attributespec_set\",\r\n        \"segment_set__job_set\",\r\n    ).order_by('-id')\r\n    serializer_class = TaskSerializer\r\n    search_fields = (\"name\", \"owner__username\", \"mode\", \"status\")\r\n    filterset_class = TaskFilter\r\n    ordering_fields = (\"id\", \"name\", \"owner\", \"status\", \"a`ssignee\")\r\n\r\n    def get_permissions(self):\r\n        http_method = self.request.method\r\n        permissions = [IsAuthenticated]\r\n\r\n        if http_method in SAFE_METHODS:\r\n            permissions.append(auth.TaskAccessPermission)\r\n        elif http_method in [\"POST\"]:\r\n            permissions.append(auth.TaskCreatePermission)\r\n        elif self.action == 'annotations' or http_method in [\"PATCH\", \"PUT\"]:\r\n            permissions.append(auth.TaskChangePermission)\r\n        elif http_method in [\"DELETE\"]:\r\n            permissions.append(auth.TaskDeletePermission)\r\n        else:\r\n            permissions.append(auth.AdminRolePermission)\r\n\r\n        return [perm() for perm in permissions]\r\n\r\n    def perform_create(self, serializer):\r\n        def validate_task_limit(owner):\r\n            admin_perm = auth.AdminRolePermission()\r\n            is_admin = admin_perm.has_permission(self.request, self)\r\n            if not is_admin and settings.RESTRICTIONS['task_limit'] is not None and \\\r\n                Task.objects.filter(owner=owner).count() >= settings.RESTRICTIONS['task_limit']:\r\n                raise serializers.ValidationError('用户拥有最大数量的任务')\r\n\r\n        owner = self.request.data.get('owner', None)\r\n        if owner:\r\n            validate_task_limit(owner)\r\n            serializer.save()\r\n        else:\r\n            validate_task_limit(self.request.user)\r\n            serializer.save(owner=self.request.user)\r\n\r\n    def perform_destroy(self, instance):\r\n        task_dirname = instance.get_task_dirname()\r\n        super().perform_destroy(instance)\r\n        shutil.rmtree(task_dirname, ignore_errors=True)\r\n        if instance.data and not instance.data.tasks.all():\r\n            shutil.rmtree(instance.data.get_data_dirname(), ignore_errors=True)\r\n            instance.data.delete()\r\n\r\n    @swagger_auto_schema(method='get',\r\n                         operation_summary='返回特定任务的作业列表',\r\n                         responses={'200': JobSerializer(many=True)})\r\n    @action(detail=True, methods=['GET'], serializer_class=JobSerializer)\r\n    def jobs(self, request, pk):\r\n        self.get_object()  # force to call check_object_permissions\r\n        queryset = Job.objects.filter(segment__task_id=pk)\r\n        serializer = JobSerializer(queryset, many=True, context={\"request\": request})\r\n        return Response(serializer.data)\r\n\r\n    @swagger_auto_schema(method='post',\r\n                         operation_summary='方法将图像或视频永久附加到任务')\r\n    @swagger_auto_schema(method='get',\r\n                         operation_summary='方法返回特定任务的数据',\r\n                         manual_parameters=[\r\n                             openapi.Parameter('type',\r\n                                               in_=openapi.IN_QUERY,\r\n                                               required=True,\r\n                                               type=openapi.TYPE_STRING,\r\n                                               enum=['chunk', 'frame', 'preview'],\r\n                                               description=\"指定请求数据的类型\"),\r\n                             openapi.Parameter('quality',\r\n                                               in_=openapi.IN_QUERY,\r\n                                               required=True,\r\n                                               type=openapi.TYPE_STRING,\r\n                                               enum=['·', 'original'],\r\n                                               description=\"指定所请求数据的质量级别，对于“预览”类型无所谓\"),\r\n                             openapi.Parameter('number',\r\n                                               in_=openapi.IN_QUERY,\r\n                                               required=True,\r\n                                               type=openapi.TYPE_NUMBER,\r\n                                               description=\"标识块或帧的唯一数值对于“预览”类型无关紧要\"),\r\n                         ]\r\n                         )\r\n    @action(detail=True, methods=['POST', 'GET'])\r\n    def data(self, request, pk):\r\n        if request.method == 'POST':\r\n            db_task = self.get_object()  # call check_object_permissions as well\r\n            serializer = DataSerializer(data=request.data)\r\n            serializer.is_valid(raise_exception=True)\r\n            db_data = serializer.save()\r\n            db_task.data = db_data\r\n            db_task.save()\r\n            data = {k: v for k, v in serializer.data.items()}\r\n            data['use_zip_chunks'] = serializer.validated_data['use_zip_chunks']\r\n            # if the value of stop_frame is 0, then inside the function we cannot know\r\n            # the value specified by the user or it's default value from the database\r\n            if 'stop_frame' not in serializer.validated_data:\r\n                data['stop_frame'] = None\r\n            task.create(db_task.id, data)\r\n            return Response(serializer.data, status=status.HTTP_202_ACCEPTED)\r\n        else:\r\n            jobId = request.query_params.get('jobId', None)\r\n            data_type = request.query_params.get('type', None)\r\n            data_id = request.query_params.get('number', None)\r\n            data_quality = request.query_params.get('quality', 'compressed')\r\n\r\n            possible_data_type_values = ('chunk', 'frame', 'preview')\r\n            possible_quality_values = ('compressed', 'original')\r\n\r\n            if not data_type or data_type not in possible_data_type_values:\r\n                return Response(data='数据类型未指定或值错误', status=status.HTTP_200_OK)\r\n            elif data_type == 'chunk' or data_type == 'frame':\r\n                if not data_id:\r\n                    return Response(data='未指定编号', status=status.HTTP_200_OK)\r\n                elif data_quality not in possible_quality_values:\r\n                    return Response(data='错误的质量值', status=status.HTTP_200_OK)\r\n            try:\r\n                # get_object()获取单个的object对象\r\n                db_task = self.get_object()\r\n                frame_provider = FrameProvider(db_task.data)\r\n                if data_type == 'chunk':\r\n                    data_id = int(data_id)\r\n                    data_quality = FrameProvider.Quality.COMPRESSED \\\r\n                        if data_quality == 'compressed' else FrameProvider.Quality.ORIGINAL\r\n                    # 获取当前执行脚本的绝对路径\r\n                    path = os.path.realpath(frame_provider.get_chunk(data_id, data_quality))\r\n                    # 如果块是真实图像上的链接，请遵循符号链接，否则sendfile中的mimetype检测将无法正常工作。\r\n                    return sendfile(request, path)\r\n                elif data_type == 'frame':\r\n                    data_id = int(data_id)\r\n                    data_quality = FrameProvider.Quality.COMPRESSED \\\r\n                        if data_quality == 'compressed' else FrameProvider.Quality.ORIGINAL\r\n                    buf, mime = frame_provider.get_frame(data_id, data_quality)\r\n                    return HttpResponse(buf.getvalue(), content_type=mime)\r\n                elif data_type == 'preview':\r\n                    return sendfile(request, frame_provider.get_preview())\r\n                else:\r\n                    return Response(data='unknown data type {}.'.format(data_type), status=status.HTTP_200_OK)\r\n            except APIException as e:\r\n                return Response(data=e.default_detail, status=e.status_code)\r\n            except Exception as e:\r\n                msg = 'cannot get requested data type: {}, number: {}, quality: {}'.format(data_type, data_id,\r\n                                                                                           data_quality)\r\n                slogger.task[pk].error(msg, exc_info=True)\r\n                return Response(data=msg + '\\n' + str(e), status=status.HTTP_200_OK)\r\n\r\n    @swagger_auto_schema(method='get',\r\n                         operation_summary='方法允许下载任务标注',\r\n                         manual_parameters=[\r\n                             openapi.Parameter('format',\r\n                                               openapi.IN_QUERY,\r\n                                               description=\"所需的输出格式名称，您可以在以下位置获取支持格式的列表：/server/annotation/formats\",\r\n                                               type=openapi.TYPE_STRING,\r\n                                               required=False),\r\n                             openapi.Parameter('filename',\r\n                                               openapi.IN_QUERY,\r\n                                               description=\"所需的输出文件名\",\r\n                                               type=openapi.TYPE_STRING,\r\n                                               required=False),\r\n                             openapi.Parameter('action',\r\n                                               in_=openapi.IN_QUERY,\r\n                                               description='用于在创建批注文件后开始下载进程',\r\n                                               type=openapi.TYPE_STRING,\r\n                                               required=False,\r\n                                               enum=['download'])],\r\n                         responses={\r\n                             '202': openapi.Response(description='已开始转储批注'),\r\n                             '201': openapi.Response(description='注释文件已准备好下载'),\r\n                             '200': openapi.Response(description='已开始下载文件')})\r\n    @swagger_auto_schema(method='put', operation_summary='方法允许上载任务批注',\r\n                         manual_parameters=[\r\n                             openapi.Parameter('format', openapi.IN_QUERY,\r\n                                               description=\"输入格式名称\\n您可以在/server/annotation/formats获取支持格式的列表。\",\r\n                                               type=openapi.TYPE_STRING, required=False)],\r\n                         responses={\r\n                             '202': openapi.Response(description='Uploading has been started'),\r\n                             '201': openapi.Response(description='Uploading has finished')})\r\n    @swagger_auto_schema(method='patch',\r\n                         operation_summary='方法对特定任务中的批注执行部分更新',\r\n                         manual_parameters=[\r\n                             openapi.Parameter('action',\r\n                                               in_=openapi.IN_QUERY,\r\n                                               required=True,\r\n                                               type=openapi.TYPE_STRING,\r\n                                               enum=['create', 'update', 'delete'])])\r\n    @swagger_auto_schema(method='delete', operation_summary='方法删除特定任务的所有批注')\r\n    @action(detail=True,\r\n            methods=['GET', 'DELETE', 'PUT', 'PATCH'],\r\n            serializer_class=LabeledDataSerializer)\r\n    def annotations(self, request, pk):\r\n        db_task = self.get_object()  # force to call check_object_permissions\r\n        if request.method == 'GET':\r\n            format_name = request.query_params.get('format')\r\n            if format_name:\r\n                return _export_annotations(db_task=db_task,\r\n                                           rq_id=\"/api/v1/tasks/{}/annotations/{}\".format(pk, format_name),\r\n                                           request=request,\r\n                                           action=request.query_params.get(\"action\", \"\").lower(),\r\n                                           callback=dm.views.export_task_annotations,\r\n                                           format_name=format_name,\r\n                                           filename=request.query_params.get(\"filename\", \"\").lower())\r\n            else:\r\n                data = dm.task.get_task_data(pk)\r\n                serializer = LabeledDataSerializer(data=data)\r\n                if serializer.is_valid():\r\n                    return Response(serializer.data)\r\n                else:\r\n                    print(serializer.errors)\r\n                    return Response(serializer.errors, status=status.HTTP_200_OK)\r\n        elif request.method == 'PUT':\r\n            format_name = request.query_params.get('format')\r\n            if format_name:\r\n                return _import_annotations(\r\n                    request=request,\r\n                    rq_id=\"{}@/api/v1/tasks/{}/annotations/upload\".format(request.user, pk),\r\n                    rq_func=dm.task.import_task_annotations,\r\n                    pk=pk,\r\n                    format_name=format_name)\r\n            else:\r\n                serializer = LabeledDataSerializer(data=request.data)\r\n                if serializer.is_valid():\r\n                    data = dm.task.put_task_data(pk, serializer.data)\r\n                    return Response(data)\r\n                else:\r\n                    print(serializer.errors)\r\n                    return Response(serializer.errors, status=status.HTTP_200_OK)\r\n        elif request.method == 'DELETE':\r\n            dm.task.delete_task_data(pk)\r\n            return Response(status=status.HTTP_204_NO_CONTENT)\r\n        elif request.method == 'PATCH':\r\n            # 获取要执行的操作\r\n            action = self.request.query_params.get(\"action\", None)\r\n            # 判断操作是否允许\r\n            if action not in dm.task.PatchAction.values():\r\n                raise serializers.ValidationError(\"请为请求指定正确的“操作”\")\r\n            serializer = LabeledDataSerializer(data=request.data)\r\n            if serializer.is_valid():\r\n                try:\r\n                    data = dm.task.patch_task_data(pk, serializer.data, action)\r\n                except (AttributeError, IntegrityError) as e:\r\n                    return Response(data=str(e), status=status.HTTP_200_OK)\r\n                return Response(data)\r\n            else:\r\n                print(serializer.errors)\r\n                return Response(serializer.errors, status=status.HTTP_200_OK)\r\n\r\n    @swagger_auto_schema(method='get', operation_summary='创建任务时，该方法返回有关创建进程状态的信息')\r\n    @action(detail=True, methods=['GET'], serializer_class=RqStatusSerializer)\r\n    def status(self, request, pk):\r\n        self.get_object()  # force to call check_object_permissions\r\n        response = self._get_rq_response(queue=\"default\", job_id=\"/api/{}/tasks/{}\".format(request.version, pk))\r\n        serializer = RqStatusSerializer(data=response)\r\n        if serializer.is_valid():\r\n            return Response(serializer.data)\r\n        else:\r\n            print(serializer.errors)\r\n            return Response(serializer.errors, status=status.HTTP_200_OK)\r\n\r\n    @staticmethod\r\n    def _get_rq_response(queue, job_id):\r\n        queue = django_rq.get_queue(queue)\r\n        job = queue.fetch_job(job_id)\r\n        response = {}\r\n        if job is None or job.is_finished:\r\n            response = {\"state\": \"Finished\"}\r\n        elif job.is_queued:\r\n            response = {\"state\": \"Queued\"}\r\n        elif job.is_failed:\r\n            response = {\"state\": \"Failed\", \"message\": job.exc_info}\r\n        else:\r\n            response = {\"state\": \"Started\"}\r\n            if 'status' in job.meta:\r\n                response['message'] = job.meta['status']\r\n        return response\r\n\r\n    @staticmethod\r\n    @swagger_auto_schema(method='get',\r\n                         operation_summary='元任务提供了与媒体相关的信息',\r\n                         responses={'200': DataMetaSerializer()})\r\n    @action(detail=True, methods=['GET'], serializer_class=DataMetaSerializer, url_path='data/meta')\r\n    def data_info(request, pk):\r\n        db_task = models.Task.objects.prefetch_related('data__images').select_related('data__video').get(pk=pk)\r\n\r\n        if hasattr(db_task.data, 'video'):\r\n            media = [db_task.data.video]\r\n        else:\r\n            media = list(db_task.data.images.order_by('frame'))\r\n\r\n        frame_meta = [{\r\n            'width': item.width,\r\n            'height': item.height,\r\n            'name': item.path,\r\n        } for item in media]\r\n\r\n        db_data = db_task.data\r\n        db_data.frames = frame_meta\r\n\r\n        serializer = DataMetaSerializer(db_data)\r\n        return Response(serializer.data)\r\n\r\n    @swagger_auto_schema(method='get', operation_summary='将任务导出为特定格式的数据集',\r\n                         manual_parameters=[\r\n                             openapi.Parameter('format',\r\n                                               openapi.IN_QUERY,\r\n                                               description=\"所需的输出格式名称\\n您可以在以下位置获取支持格式的列表：\\n/server/annotation/formats\",\r\n                                               type=openapi.TYPE_STRING, required=True),\r\n                             openapi.Parameter('filename',\r\n                                               openapi.IN_QUERY,\r\n                                               description=\"所需的输出文件名\",\r\n                                               type=openapi.TYPE_STRING,\r\n                                               required=False),\r\n                             openapi.Parameter('action',\r\n                                               in_=openapi.IN_QUERY,\r\n                                               description='用于在创建批注文件后开始下载进程',\r\n                                               type=openapi.TYPE_STRING,\r\n                                               required=False,\r\n                                               enum=['download'])\r\n                         ],\r\n                         responses={'202': openapi.Response(description='已开始导出'),\r\n                                    '201': openapi.Response(description='输出文件已准备好下载'),\r\n                                    '200': openapi.Response(description='已开始下载文件')\r\n                                    }\r\n                         )\r\n    @action(detail=True, methods=['GET'], serializer_class=None,\r\n            url_path='dataset')\r\n    def dataset_export(self, request, pk):\r\n        db_task = self.get_object()  # force to call check_object_permissions\r\n\r\n        format_name = request.query_params.get(\"format\", \"\")\r\n        return _export_annotations(db_task=db_task,\r\n                                   rq_id=\"/api/v1/tasks/{}/dataset/{}\".format(pk, format_name),\r\n                                   request=request,\r\n                                   action=request.query_params.get(\"action\", \"\").lower(),\r\n                                   callback=dm.views.export_task_as_dataset,\r\n                                   format_name=format_name,\r\n                                   filename=request.query_params.get(\"filename\", \"\").lower(),\r\n                                   )\r\n\r\n\r\n@method_decorator(name='retrieve',\r\n                  decorator=swagger_auto_schema(operation_summary='方法返回作业的详细信息'))\r\n@method_decorator(name='update',\r\n                  decorator=swagger_auto_schema(operation_summary='方法按id更新作业'))\r\n@method_decorator(name='partial_update',\r\n                  decorator=swagger_auto_schema(\r\n                      operation_summary='方法对作业中的选定字段执行部分更新'))\r\nclass JobViewSet(viewsets.GenericViewSet,\r\n                 mixins.RetrieveModelMixin,\r\n                 mixins.UpdateModelMixin):\r\n    queryset = Job.objects.all().order_by('id')\r\n    serializer_class = JobSerializer\r\n\r\n    def get_permissions(self):\r\n        http_method = self.request.method\r\n        permissions = [IsAuthenticated]\r\n\r\n        if http_method in SAFE_METHODS:\r\n            permissions.append(auth.JobAccessPermission)\r\n        elif http_method in [\"PATCH\", \"PUT\", \"DELETE\"]:\r\n            permissions.append(auth.JobChangePermission)\r\n        else:\r\n            permissions.append(auth.AdminRolePermission)\r\n\r\n        return [perm() for perm in permissions]\r\n\r\n    @swagger_auto_schema(method='get',\r\n                         operation_summary='方法返回特定作业的批注')\r\n    @swagger_auto_schema(method='put',\r\n                         operation_summary='方法对特定作业中的所有批注执行更新')\r\n    @swagger_auto_schema(method='patch',\r\n                         manual_parameters=[\r\n                             openapi.Parameter('action',\r\n                                               in_=openapi.IN_QUERY,\r\n                                               type=openapi.TYPE_STRING,\r\n                                               required=True,\r\n                                               enum=['create', 'update', 'delete'])],\r\n                         operation_summary='方法对特定作业中的批注执行部分更新')\r\n    @swagger_auto_schema(method='delete',\r\n                         operation_summary='方法删除特定作业的所有批注')\r\n    @action(detail=True,\r\n            methods=['GET', 'DELETE', 'PUT', 'PATCH'],\r\n            serializer_class=LabeledDataSerializer)\r\n    def annotations(self, request, pk):\r\n        self.get_object()  # force to call check_object_permissions\r\n        if request.method == 'GET':\r\n            data = dm.task.get_job_data(pk)\r\n            return Response(data)\r\n        elif request.method == 'PUT':\r\n            format_name = request.query_params.get(\"format\", \"\")\r\n            if format_name:\r\n                return _import_annotations(\r\n                    request=request,\r\n                    rq_id=\"{}@/api/v1/jobs/{}/annotations/upload\".format(request.user, pk),\r\n                    rq_func=dm.task.import_job_annotations,\r\n                    pk=pk,\r\n                    format_name=format_name\r\n                )\r\n            else:\r\n                serializer = LabeledDataSerializer(data=request.data)\r\n                if serializer.is_valid():\r\n                    try:\r\n                        data = dm.task.put_job_data(pk, serializer.data)\r\n                    except (AttributeError, IntegrityError) as e:\r\n                        return Response(data=str(e), status=status.HTTP_200_OK)\r\n                    return Response(data)\r\n                else:\r\n                    print(serializer.errors)\r\n                    return Response(serializer.errors, status=status.HTTP_200_OK)\r\n        elif request.method == 'DELETE':\r\n            dm.task.delete_job_data(pk)\r\n            return Response(status=status.HTTP_204_NO_CONTENT)\r\n        elif request.method == 'PATCH':\r\n            action = self.request.query_params.get(\"action\", None)\r\n            if action not in dm.task.PatchAction.values():\r\n                raise serializers.ValidationError(\"请为请求指定正确的“操作”\")\r\n            serializer = LabeledDataSerializer(data=request.data)\r\n            if serializer.is_valid():\r\n                try:\r\n                    data = dm.task.patch_job_data(pk, serializer.data, action)\r\n                except (AttributeError, IntegrityError) as e:\r\n                    return Response(data=str(e), status=status.HTTP_200_OK)\r\n                return Response(data)\r\n            else:\r\n                print(serializer.errors)\r\n                return Response(serializer.errors, status=status.HTTP_200_OK)\r\n\r\n\r\n@method_decorator(name='list',\r\n                  decorator=swagger_auto_schema(\r\n                      operation_summary='方法提供在服务器上注册的用户的分页列表'))\r\n@method_decorator(name='retrieve',\r\n                  decorator=swagger_auto_schema(\r\n                      operation_summary='方法提供特定用户的信息'))\r\n@method_decorator(name='partial_update',\r\n                  decorator=swagger_auto_schema(\r\n                      operation_summary='更新用户选择的方法字段'))\r\n@method_decorator(name='destroy',\r\n                  decorator=swagger_auto_schema(\r\n                      operation_summary='方法从服务器中删除特定用户'))\r\nclass UserViewSet(viewsets.GenericViewSet,\r\n                  mixins.ListModelMixin,\r\n                  mixins.RetrieveModelMixin,\r\n                  mixins.UpdateModelMixin,\r\n                  mixins.DestroyModelMixin):\r\n    queryset = User.objects.all().order_by('id')\r\n    http_method_names = ['get', 'post', 'head', 'patch', 'delete']\r\n\r\n    def get_serializer_class(self):\r\n        user = self.request.user\r\n        if user.is_staff:\r\n            return UserSerializer\r\n        else:\r\n            is_self = int(self.kwargs.get(\"pk\", 0)) == user.id or self.action == \"self\"\r\n            if is_self and self.request.method in SAFE_METHODS:\r\n                return UserSerializer\r\n            else:\r\n                return BasicUserSerializer\r\n\r\n    def get_permissions(self):\r\n        permissions = [IsAuthenticated]\r\n        user = self.request.user\r\n\r\n        if not (self.request.method in SAFE_METHODS):\r\n            is_self = int(self.kwargs.get(\"pk\", 0)) == user.id\r\n            if not is_self:\r\n                permissions.append(auth.AdminRolePermission)\r\n\r\n        return [perm() for perm in permissions]\r\n\r\n    @swagger_auto_schema(method='get',\r\n                         operation_summary='方法返回当前已被授权的用户的实例')\r\n    @action(detail=False, methods=['GET'])\r\n    def self(self, request):\r\n        serializer_class = self.get_serializer_class()\r\n        serializer = serializer_class(request.user, context={\"request\": request})\r\n        return Response(serializer.data)\r\n\r\n\r\nclass PluginViewSet(viewsets.ModelViewSet):\r\n    queryset = Plugin.objects.all()\r\n    serializer_class = PluginSerializer\r\n\r\n    # @action(detail=True, methods=['GET', 'PATCH', 'PUT'], serializer_class=None)\r\n    # def config(self, request, name):\r\n    #     pass\r\n\r\n    # @action(detail=True, methods=['GET', 'POST'], serializer_class=None)\r\n    # def data(self, request, name):\r\n    #     pass\r\n\r\n    # @action(detail=True, methods=['GET', 'DELETE', 'PATCH', 'PUT'],\r\n    #     serializer_class=None, url_path='data/(?P<id>\\d+)')\r\n    # def data_detail(self, request, name, id):\r\n    #     pass\r\n\r\n    @action(detail=True, methods=['GET', 'POST'], serializer_class=RqStatusSerializer)\r\n    def requests(self, request, name):\r\n        pass\r\n\r\n    @action(detail=True, methods=['GET', 'DELETE'],\r\n            serializer_class=RqStatusSerializer, url_path='requests/(?P<id>\\d+)')\r\n    def request_detail(self, request, name, rq_id):\r\n        pass\r\n\r\n\r\ndef rq_handler(job, exc_type, exc_value, tb):\r\n    job.exc_info = \"\".join(\r\n        traceback.format_exception_only(exc_type, exc_value))\r\n    job.save()\r\n    if \"tasks\" in job.id.split(\"/\"):\r\n        return task.rq_handler(job, exc_type, exc_value, tb)\r\n\r\n    return True\r\n\r\n\r\n# TODO: Method should be reimplemented as a separated view\r\n# @swagger_auto_schema(method='put', manual_parameters=[openapi.Parameter('format', in_=openapi.IN_QUERY,\r\n#         description='A name of a loader\\nYou can get annotation loaders from this API:\\n/server/annotation/formats',\r\n#         required=True, type=openapi.TYPE_STRING)],\r\n#     operation_summary='Method allows to upload annotations',\r\n#     responses={'202': openapi.Response(description='Load of annotations has been started'),\r\n#         '201': openapi.Response(description='Annotations have been uploaded')},\r\n#     tags=['tasks'])\r\n# @api_view(['PUT'])\r\ndef _import_annotations(request, rq_id, rq_func, pk, format_name):\r\n    queue = django_rq.get_queue(\"default\")\r\n    rq_job = queue.fetch_job(rq_id)\r\n\r\n    if not rq_job:\r\n        serializer = AnnotationFileSerializer(data=request.data)\r\n        if serializer.is_valid(raise_exception=True):\r\n            if format_name not in \\\r\n                [f.DISPLAY_NAME for f in dm.views.get_import_formats()]:\r\n                raise serializers.ValidationError(\r\n                    \"Unknown input format '{}'\".format(format_name))\r\n\r\n            anno_file = serializer.validated_data['annotation_file']\r\n            fd, filename = mkstemp(prefix='cvat_{}'.format(pk))\r\n            with open(filename, 'wb+') as f:\r\n                for chunk in anno_file.chunks():\r\n                    f.write(chunk)\r\n            rq_job = queue.enqueue_call(\r\n                func=rq_func,\r\n                args=(pk, filename, format_name),\r\n                job_id=rq_id\r\n            )\r\n            rq_job.meta['tmp_file'] = filename\r\n            rq_job.meta['tmp_file_descriptor'] = fd\r\n            rq_job.save_meta()\r\n    else:\r\n        if rq_job.is_finished:\r\n            os.close(rq_job.meta['tmp_file_descriptor'])\r\n            os.remove(rq_job.meta['tmp_file'])\r\n            rq_job.delete()\r\n            return Response(status=status.HTTP_201_CREATED)\r\n        elif rq_job.is_failed:\r\n            os.close(rq_job.meta['tmp_file_descriptor'])\r\n            os.remove(rq_job.meta['tmp_file'])\r\n            exc_info = str(rq_job.exc_info)\r\n            rq_job.delete()\r\n            return Response(data=exc_info, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\n    return Response(status=status.HTTP_202_ACCEPTED)\r\n\r\n\r\ndef _export_annotations(db_task, rq_id, request, format_name, action, callback, filename):\r\n    # 如果action提供了意外的参数，返回错误结果\r\n    if action not in {\"\", \"download\"}:\r\n        raise serializers.ValidationError(\"为请求指定了意外的操作\")\r\n\r\n    # 如果format_name不是允许的格式，返回错误结果\r\n    if format_name not in [f.DISPLAY_NAME for f in dm.views.get_export_formats()]:\r\n        raise serializers.ValidationError(\"为请求指定的格式未知\")\r\n\r\n    queue = django_rq.get_queue(\"default\")\r\n\r\n    rq_job = queue.fetch_job(rq_id)\r\n    if rq_job:\r\n        last_task_update_time = timezone.localtime(db_task.updated_date)\r\n        request_time = rq_job.meta.get('request_time', None)\r\n        if request_time is None or request_time < last_task_update_time:\r\n            rq_job.cancel()\r\n            rq_job.delete()\r\n        else:\r\n            if rq_job.is_finished:\r\n                file_path = rq_job.return_value\r\n                if action == \"download\" and osp.exists(file_path):\r\n                    rq_job.delete()\r\n\r\n                    timestamp = datetime.strftime(last_task_update_time, \"%Y_%m_%d_%H_%M_%S\")\r\n                    filename = filename or \"task_{}-{}-{}{}\".format(\r\n                        db_task.name, timestamp,\r\n                        format_name, osp.splitext(file_path)[1])\r\n                    return sendfile(request, file_path, attachment=True, attachment_filename=filename.lower())\r\n                else:\r\n                    if osp.exists(file_path):\r\n                        return Response(status=status.HTTP_201_CREATED)\r\n            elif rq_job.is_failed:\r\n                exc_info = str(rq_job.exc_info)\r\n                rq_job.delete()\r\n                return Response(exc_info,\r\n                                status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n            else:\r\n                return Response(status=status.HTTP_202_ACCEPTED)\r\n\r\n    try:\r\n        if request.scheme:\r\n            server_address = request.scheme + '://'\r\n        server_address += request.get_host()\r\n    except Exception:\r\n        server_address = None\r\n\r\n    ttl = dm.views.CACHE_TTL.total_seconds()\r\n    queue.enqueue_call(func=callback,\r\n                       args=(db_task.id, format_name, server_address), job_id=rq_id,\r\n                       meta={'request_time': timezone.localtime()},\r\n                       result_ttl=ttl, failure_ttl=ttl)\r\n    return Response(status=status.HTTP_202_ACCEPTED)\r\n\r\n\r\nclass LogViewSet(viewsets.GenericViewSet,\r\n                 mixins.CreateModelMixin,\r\n                 mixins.ListModelMixin,\r\n                 mixins.RetrieveModelMixin,\r\n                 mixins.UpdateModelMixin):\r\n    queryset = Log.objects.all().order_by('time')\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = LogSerializer\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cvat/apps/engine/views.py b/cvat/apps/engine/views.py
--- a/cvat/apps/engine/views.py	(revision fb49b66b8798f5267d81dab66d8084a7414f9547)
+++ b/cvat/apps/engine/views.py	(date 1608526579547)
@@ -566,15 +566,12 @@
             if action not in dm.task.PatchAction.values():
                 raise serializers.ValidationError("请为请求指定正确的“操作”")
             serializer = LabeledDataSerializer(data=request.data)
-            if serializer.is_valid():
+            if serializer.is_valid(raise_exception=True):
                 try:
                     data = dm.task.patch_task_data(pk, serializer.data, action)
                 except (AttributeError, IntegrityError) as e:
-                    return Response(data=str(e), status=status.HTTP_200_OK)
+                    return Response(data=str(e), status=status.HTTP_400_BAD_REQUEST)
                 return Response(data)
-            else:
-                print(serializer.errors)
-                return Response(serializer.errors, status=status.HTTP_200_OK)
 
     @swagger_auto_schema(method='get', operation_summary='创建任务时，该方法返回有关创建进程状态的信息')
     @action(detail=True, methods=['GET'], serializer_class=RqStatusSerializer)
@@ -582,11 +579,8 @@
         self.get_object()  # force to call check_object_permissions
         response = self._get_rq_response(queue="default", job_id="/api/{}/tasks/{}".format(request.version, pk))
         serializer = RqStatusSerializer(data=response)
-        if serializer.is_valid():
+        if serializer.is_valid(raise_exception=True):
             return Response(serializer.data)
-        else:
-            print(serializer.errors)
-            return Response(serializer.errors, status=status.HTTP_200_OK)
 
     @staticmethod
     def _get_rq_response(queue, job_id):
Index: ../Frontend/public/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\r\n    <title><%= htmlWebpackPlugin.options.title %></title>\r\n  </head>\r\n  <body>\r\n    <noscript>\r\n      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>\r\n    </noscript>\r\n    <div id=\"app\"></div>\r\n    <!-- built files will be auto injected -->\r\n  </body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Frontend/public/index.html b/../Frontend/public/index.html
--- a/../Frontend/public/index.html	(revision fb49b66b8798f5267d81dab66d8084a7414f9547)
+++ b/../Frontend/public/index.html	(date 1608446928260)
@@ -6,6 +6,7 @@
     <meta name="viewport" content="width=device-width,initial-scale=1.0">
     <link rel="icon" href="<%= BASE_URL %>favicon.ico">
     <title><%= htmlWebpackPlugin.options.title %></title>
+<!--      <script src="static/js/3rdparty/jquery-3.3.1.js"></script>-->
   </head>
   <body>
     <noscript>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8aff03a2-0667-4496-ac86-7694afcaba37\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cvat/apps/engine/models.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cvat/apps/engine/models.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cvat/apps/engine/pagination.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cvat/apps/engine/pagination.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cvat/apps/engine/serializers.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cvat/apps/engine/serializers.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cvat/apps/engine/urls.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cvat/apps/engine/urls.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cvat/apps/engine/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cvat/apps/engine/views.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../Frontend/debug.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../Frontend/debug.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../Frontend/package-lock.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../Frontend/package-lock.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../Frontend/package.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../Frontend/package.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../Frontend/src/components/logAnalysis/index.vue\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../Frontend/src/components/logAnalysis/index.vue\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../Frontend/src/router/index.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../Frontend/src/router/index.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../Frontend/src/views/Home.vue\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../Frontend/src/views/Home.vue\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"DjangoConsoleOptions\" custom-start-script=\"import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)\">\r\n    <option name=\"myCustomStartScript\" value=\"import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)\" />\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1lbVBIKEKAN4XSeizYxQspMdmE1\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"true\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8aff03a2-0667-4496-ac86-7694afcaba37\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1607865656290</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1607865656290</updated>\r\n      <workItem from=\"1607865658955\" duration=\"7522000\" />\r\n      <workItem from=\"1607946982452\" duration=\"4277000\" />\r\n      <workItem from=\"1608027860758\" duration=\"475000\" />\r\n      <workItem from=\"1608030750627\" duration=\"1833000\" />\r\n      <workItem from=\"1608032959962\" duration=\"7972000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision fb49b66b8798f5267d81dab66d8084a7414f9547)
+++ b/.idea/workspace.xml	(date 1608530561174)
@@ -1,19 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="8aff03a2-0667-4496-ac86-7694afcaba37" name="Default Changelist" comment="">
+    <list default="true" id="8aff03a2-0667-4496-ac86-7694afcaba37" name="Default Changelist" comment="1. 获取日志列表的接口开发&#10;2. 创建日志的接口开发">
+      <change afterPath="$PROJECT_DIR$/.idea/other.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/cvat/apps/engine/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/cvat/apps/engine/models.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/cvat/apps/engine/pagination.py" beforeDir="false" afterPath="$PROJECT_DIR$/cvat/apps/engine/pagination.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/cvat/apps/engine/serializers.py" beforeDir="false" afterPath="$PROJECT_DIR$/cvat/apps/engine/serializers.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/cvat/apps/engine/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/cvat/apps/engine/urls.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/cvat/apps/engine/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/cvat/apps/engine/views.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../Frontend/debug.log" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/debug.log" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../Frontend/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/package-lock.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../Frontend/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/package.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../Frontend/src/components/logAnalysis/index.vue" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/src/components/logAnalysis/index.vue" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../Frontend/src/router/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/src/router/index.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../Frontend/src/views/Home.vue" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/src/views/Home.vue" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../Frontend/public/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/../Frontend/public/index.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -35,20 +27,58 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$/.." value="carry" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
   </component>
   <component name="ProjectId" id="1lbVBIKEKAN4XSeizYxQspMdmE1" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent">
+    <property name="ASKED_ADD_EXTERNAL_FILES" value="true" />
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="WebServerToolWindowFactoryState" value="true" />
+    <property name="last_opened_file_path" value="G:/Graduate" />
     <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
+  </component>
+  <component name="RunManager">
+    <configuration name="views" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="AlexAILab" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/File" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/File/views.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python.views" />
+      </list>
+    </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
Index: .idea/other.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/other.xml b/.idea/other.xml
new file mode 100644
--- /dev/null	(date 1608521380523)
+++ b/.idea/other.xml	(date 1608521380523)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="PySciProjectComponent">
+    <option name="PY_SCI_VIEW_SUGGESTED" value="true" />
+  </component>
+</project>
\ No newline at end of file
